학습내용

1. 객체 지향의 특징

	- 코드의 재사용성
	-"       이 좋다는 건, 개발 비용 절약, 유지 보수 시 요구 사항 적용도 원활하게 
	 : 기업 관점 - 비용 절감
	 
2. 객체 지향 설계 관점
	1. 클래스간 공유
		부모 클래스 : 자식에게 멤버 변수와 메소드만 상속
					생성자랑 static{} 상속하지 않음
					
		자식 클래스 : 코딩하지 않아도 부모 클래스가 제공해주는 변수와 메소드 보유하는 구조
			메소드의 경우에 내용 수정(편집) - 재정의(override, overriding)
			
3. 최상위 root
	- api + 사용자 정의 클래스들 모두 포함
	- java.lang.Object
	- 변수와 메소드는 모든 하위 클래스들이 상속 받는 구조
	- 변수는 없고, 메소드가 11개 보유
		- 고민해야 할 메소드는 toString() / equals() 

4. 상속
	* 절대적인 권장 사항
		- 공통 멤버 변수와 메소드가 있다 하더라도 is a[이즈어] 관계인 경우만 상속으로 설계
		예시 : 직원과 고객 클래스 개발 시 공통 코드가 다수
			직원은 고객이다? 성립 불가, 상속관계 형성 안 함
			고객은 직원이다? 성립 불가, 상속관계 형성 안 함
			해결책
				is a가 성립되는 특화된 클래스
				People.java 추가 개발 후에 공통 코드는 다 구현
				직원 is a People / 고객 is a People 이 성립
				이러한 형식을 클래스 간의 관계 설계 해서 개발
				
				
	1. java.lang.Object 는 최상위 root
	2. 상속 관계에서의 객체 생성시 조상 -> 부모 -> 자식 순으로 생성 완료
	3. 주요 키워드
		this - 현 객체
			this. : 자신의 멤버 호출시 사용
		super - 부모 의미
			super. : 부모의 메소드 호출시 사용(메소드 재정의시 99% 사용)		
			super([..]) : argument(parameter)가 일치되는 부모 생성자 호출
			생성자 권장  구조
				데이터용 클래스와 상속 관계 형성되는 클래스들인 경우 고려사항
				가급적 명시적으로 기본 생성자 코딩 - 문법 오류 최소화 가능
	4. 메소드 재정의
		- overriding or override
		- @Override 선언으로 강제적으로 재정의 필수
		- 재정의 rule
			부모 메소드의 prototype(메소드 선언구)은 일치
			{} 부분 수정
		- java.lang.Object로부터 상속받은 메소드 중 toString()
			DTO 용 클래스들은 대부분 재정의	
						
5. 컴파일이 자동 생성해주는 코드
	1. import java.lang.*;
	2. extends 키워드가 없는 모든 클래스 선언구
		extends Object
	3. print()/println()
		기본값을 제외한 참조 타입들은 무조건 toString() 자동 호출
		권장 : DTO 구조의 데이터 표현용도의 클래스 개발시 toString() 재정의 권장
	4. 생성자 내부에 부모 객체 우선으로 생성을 위한 코드
		super([..]);
		단, 생성자 첫 라인에 자동 생성
		개발자가 필요에 의해서 개발시에도 생성자 첫라인에 코딩 필수
		주의사항 : argument가 일치되는 부모 생성자가 반드시 존재해야 함			
		
----------
6. 다형성 개념
	- 상위 타입이 모든 자손 수용하는 관계의 성질
	
7. 다형성 필요성
	- 코드의 재사용성 극대화(비용 절감)
	
8. 문법
	상위타입 변수 = 자식객체;
	public void m(Object o){} - 모든 객체 타입이 Object o 즉 parameter로 적용 가능
	...
9. 예시
class A extends Object{}
class B extends A{}
class C extends B{}
class D extends Object{}

//재사용성이 극대화된 메소드들 개발 + 조합 = 컴포넌트
public void m(Object v){
	...데이터를 받아서 작업...
}

Object o = new Object()  o
= new A();				 o
= new B();	o
= new C();	o
= new D();	o

A o = new Object()  x
= new A();	o
= new B();	o
= new C();	o
= new D();	x

B o = new Object() x
= new A();	x
= new B();	o
= new C();	o
= new D();	x
	
C o = new Object()  x
= new A(); x
= new B(); x
= new C(); o
= new D(); x

D o = new Object() x
= new A(); x
= new B(); x
= new C(); x
= new D(); o					
						